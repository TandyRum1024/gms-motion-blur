// 2019-08-01 01:26:20
#event create Controllable player
// (don't mind about the object name, It was a placeholder name but I'd keep it as is k thanks)
// set mask
mask_index = sprMask16;

// velocities
vx = 0;
vy = 0;
accel = 0.2;
velMax = 12;

// frames elapsed
time = 0;

// rendering attributes
enum ePLRANIM
{
    IDLE = 0,
    MOVE,
    SHOOT,
    DEAD
}
animInit = false;
animTime = 0; // "local" animation time for animation timing
animState = ePLRANIM.IDLE; // current animation state
facingH = 1; // horizontal facing
facingV = 1; // vertical facing

animOffX = 0; // sprite attributes for animation
animOffY = 0;
animOffZ = 16;
animOffAngle = 0;
animXScale = 0;
animYScale = 0;

// attack timer
shootCtr = 0;

// quip to draw while shooting stuff
quips = -1;
quips[0] = "BULLET";
quips[1] = "FIRE";
quips[2] = "pew";
quips[3] = "*bullet noises*";
quips[4] = "SCHÃœT!1";
quips[5] = "please";
quipCurrent = "";

#event step Physics & movement
// Movement
var _h = keyboard_check(vk_right) - keyboard_check(vk_left);
var _v = keyboard_check(vk_down) - keyboard_check(vk_up);

if (_h != 0)
{
    var _velDelta = velMax - (abs(vx) + _h * accel);
    vx += _velDelta;
    
    facingV = 1;
    facingH = _h;
    animState = ePLRANIM.MOVE;
}
if (_v != 0)
{
    var _velDelta = velMax - (abs(vy) + _v * accel);
    vy += _velDelta;
    
    facingV = _v;
    animState = ePLRANIM.MOVE;
}

// Collision - horizontal
var _sv = sign(vx), _ctr = 0;
if (place_meeting(x + vx, y, oBLOCK))
{
    while (!place_meeting(x + _sv, y, oBLOCK) && _ctr++ < 24)
        x += _sv;
    
    if (_ctr >= 24)
    {
        while (place_meeting(x, y, oBLOCK) && _ctr-- > 0)
            x -= _sv;
    }
    
    vx = 0;
}
x += vx;

// Collision - vertical
_sv = sign(vy); _ctr = 0;
if (place_meeting(x, y + vy, oBLOCK))
{
    while (!place_meeting(x, y + _sv, oBLOCK) && _ctr++ < 24)
        y += _sv;
    
    if (_ctr >= 24)
    {
        while (place_meeting(x, y, oBLOCK) && _ctr-- > 0)
            y -= _sv;
    }
    
    vy = 0;
}
y += vy;

// sort depth
depth = -y;

// damp velocities
if (_h == 0)
    vx *= 0.95;
if (_v == 0)
    vy *= 0.95;

// Let hell loose by pressing Z
/*
if (keyboard_check_pressed(ord('Z')))
{
    owoCtr = 80;
    if (instance_exists(oKNT_2DDEMO))
    {
        oKNT_2DDEMO.camVr += random_range(-22, 22);
        oKNT_2DDEMO.camVx += random_range(-16, 16);
        oKNT_2DDEMO.camVy += random_range(-16, 16);
        oKNT_2DDEMO.camVz += random_range(-0.4, 0.4);
    }
    
    instance_create(x, y, oOWOZONE);
    owoQuipCurrent = owoQuips[array_length_1d(owoQuips) - 1];
}
if (owoCtr > 0)
    owoCtr--;
*/
#section Calculate animation
switch (animState)
{
    case ePLRANIM.MOVE:
        /// First frame routine
        if (!animInit)
        {
            animInit = true;
            animation_set_vars(0, 0, 0, 1, 1);
        }
    
        var _velmagnitude = point_distance(0, 0, vx, vy);
        
        /// Update animation conditions
        if (_velmagnitude < 2)
        {
            animation_set(ePLRANIM.IDLE);
        }

        /// Animate
        var _boingperstep = (1 / (velMax * 2)) * pi * 2; // make 1 sin cycle per 2 frames of max velocity movement (2pi = 1 full cycle)
        var _boingamplitude = 8.0; // how many pixels to bounce upwards
        animTime += _velmagnitude / velMax;

        // sin() gives you an wavy motion, abs(sin()) gives you a bouncy motion, with 2 bounces per cycle
        animOffY = abs(sin(animTime * _boingperstep)) * _boingamplitude;
        break;
    
    default:
    
    case ePLRANIM.SHOOT:
        /// First frame routine
        if (!animInit)
        {
            animInit = true;
            animation_set_vars(0, 0, 0, 1, 1);
        }
        
        /// Update animation conditions
        var _locallerp, _sectiondiv = 4;
        animTime++;
        
        if (animTime <= 4)
        {
            _locallerp = power(min(animTime / _sectiondiv, 1.0), 2);
            animOffX = lerp(1, -8, _locallerp) * facingH;
            animOffY = lerp(1, -2, _locallerp);
            animOffAngle = lerp(-1, 4, _locallerp) * facingH;
        }
        else if (animTime <= 12)
        {
            _locallerp = power(clamp((animTime - _sectiondiv - 1) / (11 - _sectiondiv), 0.0, 1.0), 2);
            animOffX = lerp(-8, 2, _locallerp) * facingH;
            animOffY = lerp(-2, 0, _locallerp);
            animOffAngle = lerp(-1, 4, _locallerp) * facingH;
        }
        else
        {
            animation_set(ePLRANIM.IDLE);
        }
        break;
    
    case ePLRANIM.IDLE:
        /// First frame routine
        if (!animInit)
        {
            animInit = true;
            animation_set_vars(0, 0, 0, 1, 1);
        }
        
        break;
}

#event draw Draw player
// Draw shadow
var _bottomdelta = bbox_bottom - y;
draw_sprite_ext(sprShadow, 0, x, y + _bottomdelta, image_xscale, image_yscale, 0, c_white, 1.0);

// Draw player
draw_sprite_ext(sprite_index, image_index, x + animOffX, y + animOffX + animOffZ, image_xscale * animXScale, image_yscale * animYScale, image_angle + animOffAngle, image_blend, image_blend);

// debug : mask
draw_sprite_ext(mask_index, 0, x, y, image_xscale, image_yscale * animYScale, image_angle + animOffAngle, image_blend, image_alpha);

/*
if (quipCtr) // Weird stuff
{
    time++;
    draw_sprite_ext(sprite_index, 3, x + random_range(-5, 5), y + random_range(-5, 5), image_xscale, image_yscale, image_angle, c_white, 1.0);
}
else // Moving / Idle
{
    if (abs(vx) < 0.2 && abs(vy) < 0.2) // Idle
    {
        draw_sprite_ext(sprite_index, 1, x, y, image_xscale, image_yscale, image_angle, c_white, 1.0);
    }
    else // Moving
    {
        time += point_distance(0, 0, vx, vy) * 0.128;
        
        // add some bouncy motion
        var _yoff = dsin(time * 20);
        draw_sprite_ext(sprite_index, round(-_yoff + 1), x, y - abs(_yoff) * 16 * min(abs(vx) / 2, 1), image_xscale, image_yscale, image_angle + _yoff * 8, c_white, 1.0);
    }
}
*/

#event draw_end Draw on player quip if player is currently spazzing out
if (quipCtr)
{
    var _bottomdelta = bbox_bottom - y;
    var _rainbow = make_colour_hsv(time * 25, 255, 255);
    draw_set_font(fntComicSans);
    draw_set_halign(1); draw_set_valign(2);
    draw_text_transformed_colour(x, y - _bottomdelta * 1.5, quipCurrent, 1, 1, sin(time * 1.1) * 24 * (owoCtr / 60), _rainbow, _rainbow, _rainbow, _rainbow, 1.0);
    draw_set_halign(0); draw_set_valign(0);
    draw_set_font(fntDefault);
}