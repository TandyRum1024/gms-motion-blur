<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGato</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controllable player
// velocities
vx = 0;
vy = 0;

// time for animation
time = 0;

// nonsense bullsh!t timer
owoCtr = 0;

// facing
facing = 1;

// quip to draw while being nonsensical bullcrap
owoQuips = -1;
owoQuips[0] = "AAAAAAAAAAAAA#AAAA#AAAAA";
owoQuips[1] = "AKHDJSKAHDSAJGFJSHDG#FSA:DAKFJHSAKDJFHSDJ";
owoQuips[2] = "HEY";
owoQuips[3] = "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE#EE";
owoQuips[4] = "SPEAK";
owoQuipCurrent = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics
// Movement
var _h = keyboard_check(vk_right) - keyboard_check(vk_left);
var _v = keyboard_check(vk_down) - keyboard_check(vk_up);

if (_h != 0 &amp;&amp; abs(vx) &lt; 12)
{
    vx += _h * 0.2;
    facing = 1;
    sprite_index = sprGatto;
}
if (_v != 0)
{
    if (_v != facing)
    {
        facing = _v;
        if (facing) sprite_index = sprGatto;
        else sprite_index = sprGattoBack;
    }
    
    if (abs(vy) &lt; 12)
        vy += _v * 0.2;
}

// Collision - horizontal
var _sv = sign(vx), _ctr = 0;
if (place_meeting(x + vx, y, oBLOCK))
{
    while (!place_meeting(x + _sv, y, oBLOCK) &amp;&amp; _ctr++ &lt; 24)
        x += _sv;
    
    if (_ctr &gt;= 24)
    {
        while (place_meeting(x, y, oBLOCK) &amp;&amp; _ctr-- &gt; 0)
            x -= _sv;
    }
    
    vx = 0;
}
x += vx;

// Collision - vertical
_sv = sign(vy); _ctr = 0;
if (place_meeting(x, y + vy, oBLOCK))
{
    while (!place_meeting(x, y + _sv, oBLOCK) &amp;&amp; _ctr++ &lt; 24)
        y += _sv;
    
    if (_ctr &gt;= 24)
    {
        while (place_meeting(x, y, oBLOCK) &amp;&amp; _ctr-- &gt; 0)
            y -= _sv;
    }
    
    vy = 0;
}
y += vy;

// sort depth
depth = -y;

// damp velocities
if (_h == 0)
    vx *= 0.95;
if (_v == 0)
    vy *= 0.95;


// Let hell loose by pressing Z
if (keyboard_check_pressed(ord('Z')))
{
    owoCtr = 80;
    if (instance_exists(oKNT_2DDEMO))
    {
        oKNT_2DDEMO.camVr += random_range(-22, 22);
        oKNT_2DDEMO.camVx += random_range(-16, 16);
        oKNT_2DDEMO.camVy += random_range(-16, 16);
        oKNT_2DDEMO.camVz += random_range(-0.4, 0.4);
    }
    
    instance_create(x, y, oOWOZONE);
    owoQuipCurrent = owoQuips[array_length_1d(owoQuips) - 1];
}
if (owoCtr &gt; 0)
    owoCtr--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw on player quip if player is currently spazzing out
if (owoCtr)
{
    var _bottomdelta = bbox_bottom - y;
    var _rainbow = make_colour_hsv(time * 25, 255, 255);
    draw_set_font(fntOwo);
    draw_set_halign(1); draw_set_valign(2);
    draw_text_transformed_colour(x, y - _bottomdelta * 1.5, owoQuipCurrent, 1, 1, sin(time * 1.1) * 24 * (owoCtr / 60), _rainbow, _rainbow, _rainbow, _rainbow, 1.0);
    draw_set_halign(0); draw_set_valign(0);
    draw_set_font(fntDefault);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw player
// Draw shadow
var _bottomdelta = bbox_bottom - y;
draw_sprite_ext(sprShadow, 0, x, y + _bottomdelta, image_xscale, image_yscale, 0, c_white, 1.0);

if (owoCtr) // Weird stuff
{
    time++;
    draw_sprite_ext(sprite_index, 3, x + random_range(-5, 5), y + random_range(-5, 5), image_xscale, image_yscale, image_angle, c_white, 1.0);
}
else // Moving / Idle
{
    if (abs(vx) &lt; 0.2 &amp;&amp; abs(vy) &lt; 0.2) // Idle
    {
        draw_sprite_ext(sprite_index, 1, x, y, image_xscale, image_yscale, image_angle, c_white, 1.0);
    }
    else // Moving
    {
        time += point_distance(0, 0, vx, vy) * 0.128;
        
        // add some bouncy motion
        var _yoff = dsin(time * 20);
        draw_sprite_ext(sprite_index, round(-_yoff + 1), x, y - abs(_yoff) * 16 * min(abs(vx) / 2, 1), image_xscale, image_yscale, image_angle + _yoff * 8, c_white, 1.0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
