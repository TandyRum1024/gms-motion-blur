<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set shader
scene = 0;
time = 0;
ready = false;

/// Shader related stuff
texBlueNoise = sprite_get_texture(texBluenoise64, 0);
surfTemp = -1;

// motionblur
shMotionblurNoise = shader_get_sampler_index(sh_motionblur_fullscreen, "sNoise");
shMotionblurVel = shader_get_uniform(sh_motionblur_fullscreen, "uVelocity");
shMotionblurStr = shader_get_uniform(sh_motionblur_fullscreen, "uStrength");
shMotionblurTexsize = shader_get_uniform(sh_motionblur_fullscreen, "uTexsize");
shMotionblurTime = shader_get_uniform(sh_motionblur_fullscreen, "uTime");

texture_set_stage(shMotionblurNoise, texBlueNoise);
application_surface_draw_enable(true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera related stuff
viewWid = view_wview[view_current];
viewHei = view_hview[view_current];
camX = room_width / 2;
camY = room_height / 2;
camRot = 0;
camZoom = 1;
camVx = 0;
camVy = 0;
camVz = 0;
camVr = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update camera
time++;

if (instance_exists(oGato))
{
    camVx += clamp((oGato.x - camX) * 0.08, -24, 24);
    camVy += clamp((oGato.y - camY) * 0.08, -24, 24);
}
else
    instance_create(room_width * 0.5, room_height * 0.5, oGato);

// wind stuff
camVx += dsin(time * 1.5 + 42.0 + dcos(time + 64.0) * 5.0) * 1.2 + dsin(time * 2.4 + 32.0) * 0.8;
camVy += dcos(time * 1.5 + 21.0 + dcos(time + 64.0) * 5.0) * 1.2 + dsin(time * 2.4 + 16.0) * 0.8;
camVr += dsin(time * 2.2 + 21.0 + dsin(time * 2.0 + 21.0) * 4.0) * 0.02 + dcos(time * 4.2 + 32.0) * 0.008;
camVz += dcos(time * 1.8 + 11.0 + dcos(time * 4.0 + 11.0) * 8.0) * 0.0018 + dcos(time * 4.2 + 32.0) * 0.0011;

// spring
camVr += clamp(-camRot * 0.05, -45, 45);
camVz += clamp((1.0 - camZoom) * 0.08, -0.8, 0.8);

camX += camVx;
camY += camVy;
camZoom += camVz;
camRot += camVr;
camZoom = clamp(camZoom, 0.01, 8.0);

camVx *= 0.75;
camVy *= 0.75;
camVz *= 0.90;
camVr *= 0.90;

var _invZoom = 5.0;
if (camZoom != 0.0)
    _invZoom = min(1.0 / camZoom, 10.0);

view_wview[view_current] = viewWid * _invZoom;
view_hview[view_current] = viewHei * _invZoom;
view_xview[view_current] = camX - view_wview[view_current] * 0.5;
view_yview[view_current] = camY - view_hview[view_current] * 0.5;

//view_xview[view_current] = median(camX - view_wview[view_current] * 0.5, -120, room_width + 120);
//view_yview[view_current] = median(camY - view_hview[view_current] * 0.5, -120, room_height + 120);
view_angle[view_current] = camRot;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// post-processing effects
// Draw screen pass with motion blur (with interpolation on)
texture_set_interpolation(true);
shader_set(sh_motionblur_fullscreen);

// texture info
shader_set_uniform_f(shMotionblurTexsize, surface_get_width(application_surface), surface_get_height(application_surface));
// show_debug_message("AA : " + string(surface_get_width(surfTemp)) + ", " + string(surface_get_height(surfTemp)));

// blur info
shader_set_uniform_f(shMotionblurTime, time * 0.1);

// remap the velocity so that subtle movements doesn't make a lot of blur
var _vx = 0, _vy = 0;
var _vxintensity = abs(camVx) - 6, _vyintensity = abs(camVy) - 6;
if (_vxintensity &gt; 0) _vx = lerp(0, camVx, min(_vxintensity / 6, 1.0));
if (_vyintensity &gt; 0) _vy = lerp(0, camVy, min(_vyintensity / 6, 1.0));

shader_set_uniform_f(shMotionblurVel, _vx, _vy, camVz, camVr); // set camera velocities
//shader_set_uniform_f(shMotionblurVel, 0.0, 0.0, 0.0, 0.0);
shader_set_uniform_f(shMotionblurStr, 1.0, 1.0, 1.0); // set motion blur strength

// draw screen pass
draw_surface(application_surface, 0, 0);
shader_reset();
texture_set_interpolation(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// surface update
// init surface n' stuff
if (!ready)
{
    ready = true;
    time = 0;
    
    viewWid = view_wview[view_current];
    viewHei = view_hview[view_current];
    
    application_surface_draw_enable(false);
    
    if (surface_exists(surfTemp)) surface_free(surfTemp);
    surfTemp = surface_create(view_wview[view_current], view_hview[view_current]);
}

// surface heartbeat
if (!surface_exists(surfTemp))
    surfTemp = surface_create(view_wview[view_current], view_hview[view_current]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
