<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Main menu control object -- Nothing to see. Move on!
t = 0;
surfaceFire = surface_create(room_width, room_height); // guy fieri
surfaceSrc = surface_create(room_width, room_height);
surface_set_target(surfaceFire);
draw_clear_alpha(0,0);
surface_reset_target();
surface_set_target(surfaceSrc);
draw_clear_alpha(0,0);
surface_reset_target();

// Shader uniforms
// fire calculation
uCoolingMap = shader_get_sampler_index(shd_fire_calc, "u_coolingmap");
uSource = shader_get_sampler_index(shd_fire_calc, "u_source");
uTextureSize = shader_get_uniform(shd_fire_calc, "u_texturesize");
uTime = shader_get_uniform(shd_fire_calc, "u_time");
uScrollSpeed = shader_get_uniform(shd_fire_calc, "u_scrollspeed");
uWindStrength = shader_get_uniform(shd_fire_calc, "u_windstrength");
uWindSpeed = shader_get_uniform(shd_fire_calc, "u_windspeed");

texture_set_stage(uCoolingMap, sprite_get_texture(texFloor, 0));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// time update &amp; surface heartbeat
t++;

if (!surface_exists(surfaceSrc))
    surfaceSrc = surface_create(window_get_width(), window_get_height());
if (!surface_exists(surfaceFire))
    surfaceFire = surface_create(window_get_width(), window_get_height());
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// input
/*
if (keyboard_check_pressed(ord('1')))
{
    room_goto(rm_walk);
}
if (keyboard_check_pressed(ord('1')))
{
    room_goto(rm_car);
}
*/

if (keyboard_check_pressed(vk_anykey))
{
    room_goto(rm_car);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw source buffer
var _cx = surface_get_width(surfaceSrc) / 2, _cy = surface_get_height(surfaceSrc) / 2;

texture_set_interpolation(false);
draw_set_halign(1); draw_set_valign(1);

surface_set_target(surfaceSrc);

draw_clear_alpha(0,0);
// draw_set_font(fntMenuSmall);
draw_set_font(fntMenuTiny);
var _str = "타노스 호버보드#타노스 호버보드™";//"zik's#PIZZACRYPT™";
draw_text_transformed_colour(_cx + 4, _cy - 80, _str, 5, 5, 0, c_black, c_black, c_black, c_black, 1.0);
draw_text_transformed_colour(_cx, _cy - 84, _str, 5, 5, 0, c_yellow, c_yellow, c_yellow, c_yellow, 1.0);
draw_set_font(fntDefault);
surface_reset_target();

draw_set_halign(0); draw_set_valign(0);
texture_set_interpolation(true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw fire with shader
// transfer source surface to fire buffer with white
surface_set_target(surfaceFire);
d3d_set_fog(true, c_white, 0, 0);
draw_surface(surfaceSrc, 0, 0);
d3d_set_fog(false, c_white, 0, 0);
surface_reset_target();

// calculate fire
surface_set_target(surfaceFire);
shader_set(shd_fire_calc);

texFire = surface_get_texture(surfaceFire);
shader_set_uniform_f(uTextureSize, surface_get_width(surfaceFire), surface_get_height(surfaceFire)); // Texture size
shader_set_uniform_f(uTime, t); // Time
shader_set_uniform_f(uScrollSpeed, 4); // Fire Scroll speed
shader_set_uniform_f(uWindStrength, 0.4); // Wind strength
shader_set_uniform_f(uWindSpeed, 4.0); // Wind speed
texture_set_stage(uSource, texFire); // Source Texture of surfFire

draw_surface(surfaceFire, 0, 0);

shader_reset();
surface_reset_target();

draw_clear(0);
shader_set(shd_fire_effect);
draw_surface(surfaceFire, 0, 0);
shader_reset();

draw_surface(surfaceSrc, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw misc. menu
var _cx = surface_get_width(surfaceSrc) / 2, _cy = surface_get_height(surfaceSrc) / 2;

draw_set_halign(1); draw_set_valign(1);
draw_text(_cx, _cy + 50, "(WORKING TITLE)");
//draw_text_colour(_cx, _cy + 140, "Press...#&gt; 1 for top down stuff#&gt; 2 for 3D stuff", c_yellow, c_yellow, c_yellow, c_yellow, 1.0);
draw_text_colour(_cx, _cy + 160, "Press any key I guess", c_yellow, c_yellow, c_yellow, c_yellow, 1.0);
draw_set_halign(0); draw_set_valign(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
