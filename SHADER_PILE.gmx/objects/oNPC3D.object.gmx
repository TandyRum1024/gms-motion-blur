<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSnonic</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>oVTXSPR</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Billboarded "NPC" sprites
// random sprite for NPC stuff
randomize();
texIdx = choose(0, 1);

// culling
size = 16;
radius = size; // culling radius
z = size;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw billboarded sprites
/*
var _td = 0, _lookH = 0;
var _deltax = 0, _deltay = 0;

// get direction to camera
with (oKNT_3DDEMO)
{
    // _td = point_direction(other.y, other.x, y, x);
}

// test
with (oGatoCar)
{
    _td = point_direction(other.y, other.x, y, x);
    _lookH = rotation + 90;
    _deltax = dcos(_td);
    _deltay = dsin(_td);
}

// draw the wall facing the camera
var _dot = (1 - dot_product(dcos(_lookH), dsin(_lookH), _deltax, _deltay)) * 90.0;
if (_dot &lt; oKNT_3DDEMO.fov * 0.5 + radius) // 90fov = 45deg threshold
{
    var _cos = dcos(_td) * size, _sin = dsin(_td) * size;
    d3d_draw_wall(x - _cos, y - _sin, z + size, x + _cos, y + _sin, z - size, sprite_get_texture(tex3D, texIdx), 1, 1);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
