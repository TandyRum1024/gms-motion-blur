<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4242</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Main 3D camera
// show_debug_overlay(true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set camera
mouselock = true;
aspect = view_wview[0] / view_hview[0];
fov = 90;

z = 64; // z pos

lookH = 0; // horizontal rotation
lookV = -0.045; // vertical rotation / pitch
lookR = 0; // "side roll" rotation (think of Quake's wobbly camera when strafing)
lookHDelta = 0; // amount of lookH changed
lookRDelta = 0; // amount of lookR changed

camX = 0; // x offset for camera shake
camY = 0; // y offset for camera shake
camZ = 0; // forward offset for camera shake
camR = 0; // rotation offset for camera shake

/// storing velocity of camera (for shader)
vfwd = 0; // forward
vrh = 0; // horizontal
vrv = 0; // vetical / pitch
vrr = 0; // rotation

// and actual velocity, used to offset the camera
vx = 0;
vy = 0;
vz = 0;
vr = 0;

draw_set_alpha_test(true);
draw_set_alpha_test_ref_value(0);
d3d_set_zwriteenable(true);
d3d_set_culling(false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set shader
time = 0;
application_surface_draw_enable(false);

shakeEnabled = true;
motionblurEnabled = true;
motionblurStrength = 1.0;
motionblurBaseVX = 0;
motionblurBaseVY = 0;
motionblurBaseVZ = 0;
motionblurBaseVR = 0;

/// Shader related stuff
texBlueNoise = sprite_get_texture(texBluenoise64, 0);

// motionblur : camera velocity [xvel, yvel, zoomvel]
shMotionblurNoise = shader_get_sampler_index(sh_motionblur_clearcenter, "sNoise");
shMotionblurVel = shader_get_uniform(sh_motionblur_clearcenter, "uVelocity");
shMotionblurStr = shader_get_uniform(sh_motionblur_clearcenter, "uStrength");
shMotionblurTime = shader_get_uniform(sh_motionblur_clearcenter, "uTime");
shMotionblurTexsize = shader_get_uniform(sh_motionblur_clearcenter, "uTexsize");
shMotionblurNoisesize = shader_get_uniform(sh_motionblur_clearcenter, "uNoisesize");
// shMotionblurTex = shader_get_sampler_index(sh_motionblur_linear, "sTex");
// shMotionblurTexinfo = shader_get_uniform(sh_motionblur_linear, "uTexinfo");

texture_set_stage(shMotionblurNoise, texBlueNoise);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// viewmodel?
viewmodelx = 0;
viewmodely = 0;
viewmodelr = 0;
viewmodelScale = 3;

viewmodelvelr = 0;

viewmodelShakeCtr = 0; // Counter for viewmodel shaking
viewmodelShockCtr = 0; // Counter for viewmodel showing ""shocked"" face
viewmodelFacing = 0; // Viewmodel facing direction. -1 = left, 0 = forward, 1 = right
viewmodelSpr = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UI init
iui_init();
uiShow = false;

uiBlurEnabled = true;
uiShakeEnabled = true;
uiShowViewmodel = true;

uiBlurStrength = "1";
uiBlurVX = "0";
uiBlurVY = "0";
uiBlurVZ = "0";
uiBlurVR = "0";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("DESTROY");
draw_set_alpha_test(false);
d3d_set_culling(false);
d3d_set_projection_ortho(0,0,window_get_width(),window_get_height(),0);
d3d_end();

application_surface_draw_enable(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// (unused) FPS physics (unused)
/*
var _axish = keyboard_check(vk_right) - keyboard_check(vk_left);
var _axisv = keyboard_check(vk_down) - keyboard_check(vk_up);
var _axisroll = keyboard_check_pressed(ord('Q')) - keyboard_check_pressed(ord('E'));
var _movesprint = keyboard_check(vk_shift);
var _movefwd = keyboard_check(ord('W')) - keyboard_check(ord('S'));
var _moveside = keyboard_check(ord('D')) - keyboard_check(ord('A'));

if (keyboard_check_pressed(vk_escape))
{
    mouselock = !mouselock;
}

// rotate
var _rotamt = 0;

if (mouselock)
{
    var _cx = window_get_width() * 0.5, _cy = window_get_height() * 0.5;
    _rotamt = (window_mouse_get_x() - _cx) * sensivity; // _axish * 4;
    window_mouse_set(_cx, _cy);
}

lookHDelta = _rotamt;
lookH += _rotamt;
lookV += _axisv * 0.1;
vrr += -_rotamt * 0.02;

if (_axisroll != 0)
    vrr += _axisroll * 20;

lookR += vrr;

// move
if (_movesprint)
    moveVel = moveRunMax;
else
    moveVel = moveMax;

if (_movefwd != 0) accerlate_quake(moveAcc, lookH + 180 * max(-_movefwd, 0));
if (_moveside != 0) accerlate_quake(moveAcc, lookH + 90 + 180 * max(-_moveside, 0));
forwardVel = dot_product(dcos(lookH), dsin(lookH), vx, vy);
//vx = (dcos(lookH) * _movefwd + dcos(lookH + 90) * _moveside) * 2;
//vy = (dsin(lookH) * _movefwd + dsin(lookH + 90) * _moveside) * 2;

var _moveDelta = point_distance(0, 0, vx, vy);
moveCtr += _moveDelta;
camZ = dsin(moveCtr * 4) * (_moveDelta / moveVel) * 5; // headbob

// update pos
x += vx;
y += vy;
z += vz;

if (_movefwd == 0 &amp;&amp; _moveside == 0)
{
    vx *= 0.85;
    vy *= 0.85;
}
else
{
    vx *= 0.95;
    vy *= 0.95;
}

vrr += -lookR * 0.02;
vrr *= 0.9;

// Update viewmodel
var _viewmodelBob = dsin(moveCtr * 2) * (_moveDelta / moveVel);
viewmodelx = _viewmodelBob * 42; // viewmodel bob
viewmodely = abs(dcos(moveCtr * 2) * (_moveDelta / moveVel)) * -16;

viewmodelvelr += _viewmodelBob * 0.05 + _rotamt * 0.035;
viewmodelr += viewmodelvelr;
viewmodelvelr += -viewmodelr * 0.02;
viewmodelvelr *= 0.9;
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update camera motion
// update velocity
vr -= clamp(camR * 0.05, -6.0, 6.0);
vx -= clamp(camX * 0.2, -6.0, 6.0);
vy -= clamp(camY * 0.2, -6.0, 6.0);
vz -= clamp(camZ * 0.2, -6.0, 6.0);

camR += vr;
camX += vx;
camY += vy;
camZ += vz;

vr *= 0.9;
vx *= 0.9;
vy *= 0.9;
vz *= 0.9;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update viewmodel
// calculate viewmodel sprite index
if (viewmodelShockCtr &gt; 0)
{
    viewmodelShockCtr--;
    viewmodelSpr = 3;
}
else
{
    viewmodelSpr = 1 + viewmodelFacing;
}

// update viewmodel shake counter
if (viewmodelShakeCtr &gt; 0)
    viewmodelShakeCtr--;
else
    viewmodelShakeCtr = 0;
    
// update viewmodel motion
viewmodelx = -camX * 0.5;
viewmodely = -camY * 0.5 - 32 + vfwd * 4.0;
viewmodelr = camR + lookR;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Tone down blur strength gradually
motionblurStrength = lerp(motionblurStrength, 1.0, 0.6);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Exit check
if (keyboard_check_pressed(vk_escape))
{
    room_goto(rm_menu);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update UI
iui_update_io();
iui_inputX = window_mouse_get_x();
iui_inputY = window_mouse_get_y();

if (keyboard_check_pressed(vk_f1))
{
    uiShow = !uiShow;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update player side shake variable
if (instance_exists(oPlayer))
{
    oPlayer.shakeEnabled = shakeEnabled;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("END");
draw_set_alpha_test(false);
d3d_set_culling(false);
d3d_set_projection_ortho(0,0,window_get_width(),window_get_height(),0);
d3d_end();

application_surface_draw_enable(true);

iui_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// (MOTION BLUR) Draw post processed appsurf

if (motionblurEnabled)
{
    // Draw screen pass with motion blur (with interpolation on)
    texture_set_interpolation(true);
    shader_set(sh_motionblur_clearcenter);
    
    // surface size / texture size
    shader_set_uniform_f(shMotionblurTexsize, surface_get_width(application_surface), surface_get_height(application_surface));
    shader_set_uniform_f(shMotionblurNoisesize, 1 / texture_get_texel_width(texBlueNoise), 1 / texture_get_texel_height(texBlueNoise));
    
    // blur info
    time++;
    shader_set_uniform_f(shMotionblurTime, time * 0.1);
    
    // remap the velocity so that subtle movements doesn't make a lot of blur
    var _vf = min(max(0, abs(vfwd) - 4.0) / 16.0, 1.0);
    
    shader_set_uniform_f(shMotionblurVel, motionblurBaseVX + vrh + vx, motionblurBaseVY + vrv + vz, motionblurBaseVZ + _vf, motionblurBaseVR + -vrr - vr); // set camera velocities
    shader_set_uniform_f(shMotionblurStr, motionblurStrength, max(0.4, 0.5 * motionblurStrength), 2.0 * motionblurStrength); // set motion blur strength
    
    // draw screen pass
    draw_surface(application_surface, 0, 0);
    shader_reset();
    texture_set_interpolation(false);
}
else
{
    draw_surface(application_surface, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// viewmodel / HUD
var _hudx = 32, _hudy = window_get_height() - 21;
var _drawx = _hudx + viewmodelx + random_range(-viewmodelShakeCtr, viewmodelShakeCtr), _drawy = _hudy + viewmodely + random_range(-viewmodelShakeCtr, viewmodelShakeCtr);
var _drawr = viewmodelr + random_range(-viewmodelShakeCtr, viewmodelShakeCtr) * 0.8;
var _colour = make_colour_hsv(time * 2.0, 255, 255); // rainbow colour

if (uiShowViewmodel)
{
    /// Sprite
    draw_sprite_ext(sprViewThanno, viewmodelSpr, _drawx, _drawy, viewmodelScale, viewmodelScale, _drawr, c_white, 1);
    
    /// Text
    // calculate metre per second
    var _metreperframe = vfwd / 8;
    var _mph = _metreperframe * 26.8224;
    var _hudstr = string(_mph) + " MPH";
    var _strscale = viewmodelScale * 0.5;
    var _viewmodelOffx = 42 * viewmodelScale;
    
    draw_set_halign(0); draw_set_valign(2);
    draw_set_font(fntMenuTiny);
    draw_text_transformed_colour(_drawx + _viewmodelOffx + 2, _drawy, _hudstr, _strscale, _strscale, _drawr, c_black, c_black, c_black, c_black, 1.0);
    draw_text_transformed_colour(_drawx + _viewmodelOffx, _drawy, _hudstr, _strscale, _strscale, _drawr, _colour, _colour, _colour, _colour, 1.0);
    draw_set_font(fntDefault);
    draw_set_halign(0); draw_set_valign(0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw FPS counter &amp; info
var _wid = window_get_width() - 10;
var _cx = window_get_width() * 0.5;

draw_set_font(fntMenuTiny);
if (uiShow)
{
    iui_begin();
    
    draw_set_halign(0);
    
    // backdrop
    var _uilabel = $9cd6fc;
    var _uiheight = 150;
    iui_rect(0, 0, _cx * 2, _uiheight, $212020);
    iui_rect(0, _uiheight, _cx * 2, 2, c_black);
    iui_label_shadow(10, _uiheight + 2, "^ Debug menu! Press &lt;F1&gt; to hide.", _uilabel, 1, 1, 0);
    
    var _uiy = 24;
    iui_label_shadow(10, _uiy, "BLUR STRENGTH", _uilabel, 1, 1, 0);
    uiBlurStrength = iui_textbox_numberonly(10, _uiy + 24, 80, 24, uiBlurStrength, "#3D_STR");
    
    iui_label_shadow(200, _uiy, "MOTION BLUR", _uilabel, 1, 1, 0);
    uiBlurEnabled = iui_checkbox(200, _uiy + 24, 24, 24, uiBlurEnabled, "#3D_ENABLED");
    
    iui_label_shadow(400, _uiy, "CAMERA SHAKE", _uilabel, 1, 1, 0);
    uiShakeEnabled = iui_checkbox(400, _uiy + 24, 24, 24, uiShakeEnabled, "#3D_SHAKE");
    
    iui_label_shadow(600, _uiy, "SHOW VIEWMODEL", _uilabel, 1, 1, 0);
    uiShowViewmodel = iui_checkbox(600, _uiy + 24, 24, 24, uiShowViewmodel, "#3D_VIEWMODEL");
    
    _uiy += 64;
    iui_label_shadow(10, _uiy, "X Vel.", _uilabel, 1, 1, 0);
    uiBlurVX = iui_textbox_numberonly(10, _uiy + 24, 80, 24, uiBlurVX, "#3D_VX");
    
    iui_label_shadow(100, _uiy, "Y Vel.", _uilabel, 1, 1, 0);
    uiBlurVY = iui_textbox_numberonly(100, _uiy + 24, 80, 24, uiBlurVY, "#3D_VY");
    
    iui_label_shadow(200, _uiy, "Zoom Vel.", _uilabel, 1, 1, 0);
    uiBlurVZ = iui_textbox_numberonly(200, _uiy + 24, 80, 24, uiBlurVZ, "#3D_VZ");
    
    iui_label_shadow(300, _uiy, "Rot. Vel.", _uilabel, 1, 1, 0);
    uiBlurVR = iui_textbox_numberonly(300, _uiy + 24, 80, 24, uiBlurVR, "#3D_VR");
    
    if (iui_kbFocusItem != -1)
    {
        motionblurStrength = real(uiBlurStrength);
    }
    else
    {
        uiBlurStrength = string(motionblurStrength);
    }
    
    motionblurBaseVX = real(uiBlurVX);
    motionblurBaseVY = real(uiBlurVY);
    motionblurBaseVZ = real(uiBlurVZ);
    motionblurBaseVR = real(uiBlurVR);
    
    motionblurEnabled = uiBlurEnabled;
    shakeEnabled = uiShakeEnabled;
    iui_end();
}
else
{
    var _infoy = 10, _infostr = "&lt;ARROW KEY&gt; to move#&lt;F1&gt; for debug menu", _infocol = c_yellow;
    
    draw_set_halign(1);
    draw_text_colour(_cx + 2, _infoy + 2, _infostr, 0, 0, 0, 0, 1.0);
    draw_text_colour(_cx, _infoy, _infostr, _infocol, _infocol, _infocol, _infocol, 1.0);
}

draw_set_halign(0);
draw_text_colour(11, 11, "FPS : " + string(fps_real), 0, 0, 0, 0, 1.0);
draw_text_colour(10, 10, "FPS : " + string(fps_real), c_yellow, c_yellow, c_yellow, c_yellow, 1.0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw end
d3d_end();
d3d_set_projection_ortho(0,0,window_get_width(),window_get_height(),0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set projection
var _lookcos = dcos(lookH);
var _looksin = dsin(lookH);
var _lookcos2 = dcos(lookH + 90);
var _looksin2 = dsin(lookH + 90);

var _targetx = x + _lookcos, _targety = y + _looksin, _targetz = z + lookV;
var _rollx = 0, _rolly = 1 * dsin(lookR + camR), _rollz = 1 * dcos(lookR + camR);
var _xup = _rollx * _lookcos - _rolly * _looksin;
var _yup = _rollx * _looksin + _rolly * _lookcos;
var _zup = _rollz;

var _xoff = camX * _lookcos2 - camY * _looksin2;
var _yoff = camX * _looksin2 + camY * _lookcos2;

d3d_start();
d3d_set_projection_ext(x + _xoff, y + _yoff, z + camZ, _targetx + _xoff, _targety + _yoff, _targetz + camZ, _xup, _yup, _zup, fov, aspect, 0.1, 2048);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw sky
var _dist = 2000;
d3d_draw_cylinder(x - _dist, y - _dist, z + _dist, x + _dist, y + _dist, z - _dist, sprite_get_texture(tex3DBG, 0), 1, 1, true, 64);
d3d_draw_floor(-6400, -6400, -4, 6400, 6400, -4, sprite_get_texture(texFloor, 1), 200, 200);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
